import Head from "next/head";
import React, { createContext, useState, lazy, Suspense } from "react";
import Navbar from "@/components/_organisms/NavBar";
import { HeroProps } from "@/components/_organisms/Hero";
import { SocialLinks } from "@/components/_organisms/Footer";
import { AboutProps } from "@/components/_organisms/About";
import { SpeedInsights } from "@vercel/speed-insights/next";
import { getAllData } from "./api/allData";

type ThemeContextType = {
  darkMode: boolean;
  toggleTheme: () => void;
};

const ThemeContext = createContext<ThemeContextType>({
  darkMode: false,
  toggleTheme: () => {},
});

const Hero = lazy(() => import("@/components/_organisms/Hero"));
const About = lazy(() => import("@/components/_organisms/About"));
const Footer = lazy(() => import("@/components/_organisms/Footer"));

type InitialData = {
  info?: HeroProps;
  aboutMe?: AboutProps;
  socialLinks?: SocialLinks;
};

type HomeProps = {
  initialData: InitialData | null;
  error?: string;
};

export async function getServerSideProps() {
  try {
    const data = await getAllData();
    return {
      props: {
        initialData: data,
      },
    };
  } catch (error) {
    return {
      props: {
        initialData: null,
        error: (error as Error).message || "Failed to fetch data",
      },
    };
  }
}

export default function Home({ initialData, error }: HomeProps) {
  const [darkMode, setDarkMode] = useState(false);
  const toggleTheme = () => {
    setDarkMode(!darkMode);
  };

  return (
    <>
      <Head>
        <title>Avinash Rao | Portfolio</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.svg' />
      </Head>
      <ThemeContext.Provider value={{ darkMode, toggleTheme }}>
        <main className={`${darkMode ? "bg-gray-800 p-4" : "p-4"}`}>
          <Navbar />
          <Suspense fallback={<div>Loading...</div>}>
            {initialData?.info && <Hero info={initialData.info} />}
          </Suspense>
          <Suspense fallback={<div>Loading...</div>}>
            {initialData?.aboutMe && <About about={initialData.aboutMe} />}
          </Suspense>
          <Suspense fallback={<div>Loading...</div>}>
            {initialData?.socialLinks && (
              <Footer socialLinks={initialData.socialLinks} />
            )}
          </Suspense>
          <SpeedInsights />
        </main>
      </ThemeContext.Provider>
    </>
  );
}
